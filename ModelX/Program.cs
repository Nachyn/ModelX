using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Localization;
using Newtonsoft.Json.Converters;
using ModelX.Common.Extensions;
using ModelX.Common.Middlewares;
using ModelX.Common.UserAccessor;
using ModelX.Domain.Enums;
using ModelX.Domain.Helpers;
using ModelX.Infrastructure;
using ModelX.Infrastructure.Database;
using ModelX.Logic;
using ModelX.Logic.Common.UserAccessor;

var builder = WebApplication.CreateBuilder(args);

var configuration = builder.Configuration;
var services = builder.Services;

services.AddLocalization(options => options.ResourcesPath = "Resources");
services.AddControllers()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.Converters.Add(
            new JsonStringEnumConverter());
    })
    .AddNewtonsoftJson(options =>
    {
        options.SerializerSettings.Converters.Add(
            new StringEnumConverter());
    });
services.AddHttpContextAccessor();
services.AddTransient<IUserAccessor, UserAccessor>();

services.AddInfrastructure(configuration);
services.AddLogic(configuration, builder.Environment.ContentRootPath);
services.AddAspIdentityJwt(configuration);
services.AddCors(options =>
{
    options.AddPolicy("EnableCORS",
        builder =>
        {
            builder.AllowAnyOrigin()
                .AllowAnyHeader()
                .AllowAnyMethod()
                .WithExposedHeaders("Content-Disposition");
        });
});
services.AddAutoGeneratedApi();
services.AddHealthChecks()
    .AddDbContextCheck<AppDbContext>();


var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseCors("EnableCORS");
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseHsts();
    app.UseHttpsRedirection();
}

var supportedCultures = CulturesHelper.GetSupportedCulturesInfo();
app.UseRequestLocalization(new RequestLocalizationOptions
{
    DefaultRequestCulture =
        new RequestCulture(Cultures.EN.GetEnumDescription()),
    SupportedCultures = supportedCultures,
    SupportedUICultures = supportedCultures
});

const string specificationRoute = "/api/specification.json";
app.UseOpenApi(settings => settings.Path = specificationRoute);
app.UseSwaggerUi3(settings =>
{
    settings.Path = "/api";
    settings.DocumentPath = specificationRoute;
});
app.UseRouting();
app.UseCustomExceptionHandler();
app.UseHealthChecks("/health");
app.UseEndpoints(endpoints => { endpoints.MapControllers(); });


var scopedFactory = app.Services.GetRequiredService<IServiceScopeFactory>();
using (var scope = scopedFactory.CreateScope())
{
    try
    {
        var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        await AppDbContextSeed.InitializeAsync(context);
    }
    catch (Exception ex)
    {
        var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
        logger.LogError(ex, "An error occurred while seeding the database.");
    }
}

app.Run();